const { Pool } = require('pg');

async function forzarCorreccionPostgreSQL() {
    try {
        console.log('üöÄ Forzando correcci√≥n de estructura PostgreSQL...\n');
        
        // Verificar si tenemos la URL de la base de datos
        const databaseUrl = process.env.DATABASE_URL;
        if (!databaseUrl) {
            console.log('‚ùå No se encontr√≥ DATABASE_URL en las variables de entorno');
            console.log('üí° Este script debe ejecutarse en el servidor de Render');
            return;
        }
        
        console.log('‚úÖ DATABASE_URL encontrada');
        
        // Crear conexi√≥n a PostgreSQL
        const pool = new Pool({
            connectionString: databaseUrl,
            ssl: {
                rejectUnauthorized: false
            }
        });
        
        console.log('üîå Conectando a PostgreSQL...');
        
        const client = await pool.connect();
        console.log('‚úÖ Conexi√≥n exitosa a PostgreSQL');
        
        // 1. Forzar correcci√≥n de tabla representantes
        console.log('\nüîß Corrigiendo tabla representantes...');
        try {
            await client.query('ALTER TABLE representantes ALTER COLUMN cedula TYPE VARCHAR(10)');
            console.log('‚úÖ C√©dula en representantes cambiada a VARCHAR(10)');
        } catch (err) {
            console.log('‚ö†Ô∏è Error al cambiar representantes:', err.message);
        }
        
        // 2. Forzar correcci√≥n de tabla maestros
        console.log('\nüîß Corrigiendo tabla maestros...');
        try {
            await client.query('ALTER TABLE maestros ALTER COLUMN cedula TYPE VARCHAR(10)');
            console.log('‚úÖ C√©dula en maestros cambiada a VARCHAR(10)');
        } catch (err) {
            console.log('‚ö†Ô∏è Error al cambiar maestros:', err.message);
        }
        
        // 3. Forzar correcci√≥n de tabla estudiantes
        console.log('\nüîß Corrigiendo tabla estudiantes...');
        try {
            await client.query('ALTER TABLE estudiantes ALTER COLUMN cedula_representante TYPE VARCHAR(10)');
            console.log('‚úÖ cedula_representante en estudiantes cambiada a VARCHAR(10)');
        } catch (err) {
            console.log('‚ö†Ô∏è Error al cambiar estudiantes:', err.message);
        }
        
        // 4. Verificar estructura final
        console.log('\nüìã Verificando estructura final...');
        const tables = ['representantes', 'maestros', 'estudiantes'];
        
        for (const table of tables) {
            console.log(`\n${table.toUpperCase()}:`);
            const structure = await client.query(`
                SELECT column_name, data_type, character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = '${table}' 
                AND (column_name = 'cedula' OR column_name = 'cedula_representante')
                ORDER BY column_name;
            `);
            
            structure.rows.forEach(col => {
                const length = col.character_maximum_length ? `(${col.character_maximum_length})` : '';
                console.log(`   ${col.column_name}: ${col.data_type}${length}`);
            });
        }
        
        // 5. Probar inserci√≥n con c√©dula de 7 d√≠gitos
        console.log('\nüß™ Probando inserci√≥n con c√©dula de 7 d√≠gitos...');
        const cedula7 = Math.floor(Math.random() * 9000000) + 1000000; // 7 d√≠gitos √∫nicos
        const emailTest = `test.7digitos.${Date.now()}@postgresql.com`;
        
        try {
            const insertResult = await client.query(`
                INSERT INTO representantes (cedula, nombre, email, password) 
                VALUES ($1, $2, $3, $4) 
                RETURNING id, cedula, nombre, email
            `, [cedula7.toString(), 'Test 7 D√≠gitos', emailTest, 'test123']);
            
            console.log('‚úÖ Inserci√≥n exitosa con 7 d√≠gitos:', insertResult.rows[0]);
            
            // Limpiar el registro de prueba
            await client.query('DELETE FROM representantes WHERE cedula = $1', [cedula7.toString()]);
            console.log('üßπ Registro de prueba eliminado');
            
        } catch (insertError) {
            console.log('‚ùå Error en inserci√≥n con 7 d√≠gitos:', insertError.message);
            console.log('   C√≥digo de error:', insertError.code);
            console.log('   Detalles:', insertError.detail);
        }
        
        // 6. Probar inserci√≥n con c√©dula de 8 d√≠gitos
        console.log('\nüß™ Probando inserci√≥n con c√©dula de 8 d√≠gitos...');
        const cedula8 = Math.floor(Math.random() * 90000000) + 10000000; // 8 d√≠gitos √∫nicos
        const emailTest2 = `test.8digitos.${Date.now()}@postgresql.com`;
        
        try {
            const insertResult2 = await client.query(`
                INSERT INTO representantes (cedula, nombre, email, password) 
                VALUES ($1, $2, $3, $4) 
                RETURNING id, cedula, nombre, email
            `, [cedula8.toString(), 'Test 8 D√≠gitos', emailTest2, 'test123']);
            
            console.log('‚úÖ Inserci√≥n exitosa con 8 d√≠gitos:', insertResult2.rows[0]);
            
            // Limpiar el registro de prueba
            await client.query('DELETE FROM representantes WHERE cedula = $1', [cedula8.toString()]);
            console.log('üßπ Registro de prueba eliminado');
            
        } catch (insertError2) {
            console.log('‚ùå Error en inserci√≥n con 8 d√≠gitos:', insertError2.message);
            console.log('   C√≥digo de error:', insertError2.code);
            console.log('   Detalles:', insertError2.detail);
        }
        
        client.release();
        await pool.end();
        
        console.log('\nüéâ ¬°Correcci√≥n forzada completada!');
        console.log('üí° Ahora puedes registrar representantes con c√©dulas de 7 u 8 d√≠gitos');
        
    } catch (err) {
        console.error('‚ùå Error forzando correcci√≥n PostgreSQL:', err.message);
        console.error('   Detalles completos:', err);
    }
}

forzarCorreccionPostgreSQL(); 